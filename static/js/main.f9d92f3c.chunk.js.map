{"version":3,"sources":["Components/Header.js","Components/Squars.js","Components/GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Squars","index","playerTurn","gameState","borderString","drawGrid","onClick","e","value","GameBoard","useState","currentPlayer","setCurrentPlayer","moves","setMoves","emptyGrid","setGameState","winnerDraw","winner","possibleWins","i","length","a","b","c","newGameState","result","alert","moveNumber","console","log","map","squar","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAUeA,EARA,WACX,OACI,qBAAKC,UAAU,uCAAf,0B,OCwBOC,EA3BA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAMC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,UAoB9B,OACI,qBAAKJ,UAAS,oCAjBD,SAAAE,GAEb,IAAIG,EAAe,GAYnB,OAXKH,GAAS,EACTG,GAAgB,KAEZH,GAAS,IACZG,GAAgB,MAGT,IAATH,GAAwB,IAAVA,GAAwB,IAATA,IAE7BG,GAAgB,QAEbA,EAGsCC,CAASJ,IAAUK,QAAS,SAAAC,GAAC,OAAIL,EAAWD,IAAzF,SACKE,EAAUF,GAAOO,SC6EXC,EAhGD,WAAM,MAGsBC,mBAAS,KAH/B,mBAGbC,EAHa,KAGEC,EAHF,OAIMF,mBAAS,GAJf,mBAIbG,EAJa,KAINC,EAJM,KAKdC,EAAU,CACZ,CAACP,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAM,MACP,CAACA,MAAO,MACR,CAACA,MAAM,OAdS,EAgBcE,mBAASK,GAhBvB,mBAgBbZ,EAhBa,KAgBFa,EAhBE,KAmBdC,EAAa,WAYf,IAXA,IAAIC,GAAS,EACTC,EAAe,CACf,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAAC,IAAD,cACxBD,EAAaC,GADW,GACnCE,EADmC,KAChCC,EADgC,KAC7BC,EAD6B,KAGtCrB,EAAUmB,GAAGd,OAASL,EAAUmB,GAAGd,QAAUL,EAAUoB,GAAGf,OAASL,EAAUoB,GAAGf,QAAUL,EAAUqB,GAAGhB,QAEvGU,EAASf,EAAUmB,GAAGd,OAG7B,OAAOU,GAKNhB,EAAa,SAACD,GAGhB,IAAIwB,EAAetB,EACnB,GAAkC,OAA9BsB,EAAaxB,GAAOO,MAAgB,CACpCiB,EAAaxB,GAAOO,MAAQG,EAC5BK,EAAaS,GAGbb,EADmC,MAAlBD,EAAwB,IAAM,KAE/C,IAAIe,EAAST,KACQ,IAAjBA,KAEAU,MAAM,UAAD,OAAWD,EAAX,oBAGT,IAAIE,EAAaf,EAAQ,EACzBC,EAASc,GACTC,QAAQC,IAAIF,GACO,IAAfA,GACAD,MAAM,kBAMlB,OACI,qCACA,sBAAK5B,UAAU,+BAAf,UACQ,mDAAsBY,EAAtB,OACA,wBAAQL,QAAS,WAAKU,EAAaD,IAAnC,wBAEJ,sBAAKhB,UAAU,4DAAf,UACKI,EAAU4B,KAAI,SAACC,EAAOC,GAAR,OACX,cAAC,EAAD,CAAkBhC,MAAOgC,EAAK9B,UAAWA,EACzCD,WAAYA,GADC+B,MAFrB,WClEGC,MATf,WACE,OACE,sBAAKnC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f9d92f3c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"text-center header shadow-sm p-3 m-3\">\r\n            TIC TAC TOE\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nconst Squars = ({index,playerTurn,gameState}) => {\r\n    //console.log(index)\r\n    // here i have defined a function which will handle our css part whatever I ahve made for grid\r\n    // bb,bt,bsb and it it taking index as props.\r\n    const drawGrid = index => {\r\n        //console.log(index);\r\n        let borderString = \"\";\r\n         if (index <= 2) {\r\n             borderString += \"bb\";\r\n         }\r\n        else if (index >= 6) {\r\n              borderString += \"bt\";\r\n        }\r\n\r\n        if (index ===1 || index === 4 || index ===7)\r\n        {\r\n            borderString += \" bsb\";\r\n        }\r\n        return borderString;\r\n    }\r\n    return (\r\n        <div className={`x5 text-center game-squar ${drawGrid(index)}`} onClick={e => playerTurn(index)} > \r\n            {gameState[index].value}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Squars;","import React from 'react';\r\nimport Squars from './Squars';\r\nimport { useState} from 'react';\r\n\r\nconst GameBoard = () => {\r\n    //current player.\r\n    //game state.\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n    const [moves, setMoves] = useState(0);\r\n    const emptyGrid=[\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value: null},\r\n        {value:null}\r\n    ]\r\n    const [gameState, setGameState] = useState(emptyGrid);\r\n    //console.log(gameState[0].value)\r\n    // to check winner and draw.....\r\n    const winnerDraw = () => {\r\n        let winner = false;\r\n        let possibleWins = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n        for (let i = 0; i < possibleWins.length; i++) {\r\n            const [a, b, c] = possibleWins[i];\r\n            //console.log(a,b,c),here i checked all winning possibility..\r\n            if (gameState[a].value && gameState[a].value === gameState[b].value && gameState[b].value === gameState[c].value)\r\n            {\r\n                winner = gameState[a].value;      \r\n            }\r\n        }\r\n         return winner;\r\n        \r\n    }\r\n\r\n     //changing the state...........\r\n    const playerTurn = (index) => {\r\n        //console.log(index);\r\n        //here when griditem is null text should be display after that if we click on that griditem again then should not be overrid.\r\n        let newGameState = gameState;\r\n        if (newGameState[index].value === null) {\r\n            newGameState[index].value = currentPlayer;\r\n            setGameState(newGameState);\r\n           // console.log(newGameState.value)\r\n            let nextPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n            setCurrentPlayer(nextPlayer);\r\n            let result = winnerDraw();\r\n            if (winnerDraw() !== false)\r\n            {\r\n                alert(`Player ${result} won the match.`) \r\n                \r\n            }\r\n            let moveNumber = moves + 1;\r\n            setMoves(moveNumber);\r\n            console.log(moveNumber)\r\n            if (moveNumber === 9) {\r\n                alert(\"Game is draw\");\r\n             }\r\n        }\r\n        \r\n    }\r\n  \r\n    return (\r\n        <>\r\n        <div className=\"col-md-12 col-12 text-center\">\r\n                <h2>Current Player : {currentPlayer} </h2>\r\n                <button onClick={()=>{setGameState(emptyGrid)}}>Restart</button>\r\n        </div>\r\n            <div className=\"bg-white col-md-6 offset-md-3 gameBoard shadow-sm row p-4\">\r\n                {gameState.map((squar, key) => (\r\n                    <Squars key={key} index={key} gameState={gameState}\r\n                    playerTurn={playerTurn} />\r\n                ))};\r\n                \r\n                {/* here we don't want to repeat  ourself to doing that.. */}\r\n                {/* <Squars />\r\n                <Squars />\r\n                <Squars />\r\n                <Squars />\r\n                <Squars />\r\n                <Squars />\r\n                <Squars />\r\n                <Squars /> */}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n    export default GameBoard;","import 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Header from './Components/Header';\nimport GameBoard from './Components/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}